{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport { PrimeTemplate } from 'primeng/api';\n\nfunction Button_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a1, a2, a3, a4) {\n  return {\n    \"p-button-icon\": true,\n    \"p-button-icon-left\": a1,\n    \"p-button-icon-right\": a2,\n    \"p-button-icon-top\": a3,\n    \"p-button-icon-bottom\": a4\n  };\n};\n\nfunction Button_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.loading ? \"p-button-loading-icon \" + ctx_r1.loadingIcon : ctx_r1.icon);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(4, _c0, ctx_r1.iconPos === \"left\" && ctx_r1.label, ctx_r1.iconPos === \"right\" && ctx_r1.label, ctx_r1.iconPos === \"top\" && ctx_r1.label, ctx_r1.iconPos === \"bottom\" && ctx_r1.label));\n    i0.ɵɵattribute(\"aria-hidden\", true);\n  }\n}\n\nfunction Button_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-hidden\", ctx_r2.icon && !ctx_r2.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.label || \"\\xA0\");\n  }\n}\n\nfunction Button_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.badgeClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.badgeStyleClass());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.badge);\n  }\n}\n\nconst _c1 = function (a1, a2, a3, a4, a5) {\n  return {\n    \"p-button p-component\": true,\n    \"p-button-icon-only\": a1,\n    \"p-button-vertical\": a2,\n    \"p-disabled\": a3,\n    \"p-button-loading\": a4,\n    \"p-button-loading-label-only\": a5\n  };\n};\n\nconst _c2 = [\"*\"];\nlet ButtonDirective = /*#__PURE__*/(() => {\n  class ButtonDirective {\n    constructor(el) {\n      this.el = el;\n      this.iconPos = 'left';\n      this.loadingIcon = \"pi pi-spinner pi-spin\";\n      this._loading = false;\n    }\n\n    ngAfterViewInit() {\n      this._initialStyleClass = this.el.nativeElement.className;\n      DomHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\n\n      if (this.icon || this.loading) {\n        this.createIconEl();\n      }\n\n      let labelElement = document.createElement(\"span\");\n\n      if (this.icon && !this.label) {\n        labelElement.setAttribute('aria-hidden', 'true');\n      }\n\n      labelElement.className = 'p-button-label';\n      if (this.label) labelElement.appendChild(document.createTextNode(this.label));else labelElement.innerHTML = '&nbsp;';\n      this.el.nativeElement.appendChild(labelElement);\n      this.initialized = true;\n    }\n\n    getStyleClass() {\n      let styleClass = 'p-button p-component';\n\n      if (this.icon && !this.label) {\n        styleClass = styleClass + ' p-button-icon-only';\n      }\n\n      if (this.loading) {\n        styleClass = styleClass + ' p-disabled p-button-loading';\n        if (!this.icon && this.label) styleClass = styleClass + ' p-button-loading-label-only';\n      }\n\n      return styleClass;\n    }\n\n    setStyleClass() {\n      let styleClass = this.getStyleClass();\n      this.el.nativeElement.className = styleClass + ' ' + this._initialStyleClass;\n    }\n\n    createIconEl() {\n      let iconElement = document.createElement(\"span\");\n      iconElement.className = 'p-button-icon';\n      iconElement.setAttribute(\"aria-hidden\", \"true\");\n      let iconPosClass = this.label ? 'p-button-icon-' + this.iconPos : null;\n\n      if (iconPosClass) {\n        DomHandler.addClass(iconElement, iconPosClass);\n      }\n\n      let iconClass = this.getIconClass();\n\n      if (iconClass) {\n        DomHandler.addMultipleClasses(iconElement, iconClass);\n      }\n\n      let labelEl = DomHandler.findSingle(this.el.nativeElement, '.p-button-label');\n      if (labelEl) this.el.nativeElement.insertBefore(iconElement, labelEl);else this.el.nativeElement.appendChild(iconElement);\n    }\n\n    getIconClass() {\n      return this.loading ? 'p-button-loading-icon ' + this.loadingIcon : this._icon;\n    }\n\n    setIconClass() {\n      let iconElement = DomHandler.findSingle(this.el.nativeElement, '.p-button-icon');\n\n      if (iconElement) {\n        if (this.iconPos) iconElement.className = 'p-button-icon p-button-icon-' + this.iconPos + ' ' + this.getIconClass();else iconElement.className = 'p-button-icon ' + this.getIconClass();\n      } else {\n        this.createIconEl();\n      }\n    }\n\n    removeIconElement() {\n      let iconElement = DomHandler.findSingle(this.el.nativeElement, '.p-button-icon');\n      this.el.nativeElement.removeChild(iconElement);\n    }\n\n    get label() {\n      return this._label;\n    }\n\n    set label(val) {\n      this._label = val;\n\n      if (this.initialized) {\n        DomHandler.findSingle(this.el.nativeElement, '.p-button-label').textContent = this._label || '&nbsp;';\n\n        if (this.loading || this.icon) {\n          this.setIconClass();\n        }\n\n        this.setStyleClass();\n      }\n    }\n\n    get icon() {\n      return this._icon;\n    }\n\n    set icon(val) {\n      this._icon = val;\n\n      if (this.initialized) {\n        this.setIconClass();\n        this.setStyleClass();\n      }\n    }\n\n    get loading() {\n      return this._loading;\n    }\n\n    set loading(val) {\n      this._loading = val;\n\n      if (this.initialized) {\n        if (this.loading || this.icon) this.setIconClass();else this.removeIconElement();\n        this.setStyleClass();\n      }\n    }\n\n    ngOnDestroy() {\n      this.initialized = false;\n    }\n\n  }\n\n  ButtonDirective.ɵfac = function ButtonDirective_Factory(t) {\n    return new (t || ButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ButtonDirective,\n    selectors: [[\"\", \"pButton\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      iconPos: \"iconPos\",\n      loadingIcon: \"loadingIcon\",\n      label: \"label\",\n      icon: \"icon\",\n      loading: \"loading\"\n    }\n  });\n  return ButtonDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Button = /*#__PURE__*/(() => {\n  class Button {\n    constructor() {\n      this.type = \"button\";\n      this.iconPos = 'left';\n      this.loading = false;\n      this.loadingIcon = \"pi pi-spinner pi-spin\";\n      this.onClick = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n    }\n\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'content':\n            this.contentTemplate = item.template;\n            break;\n\n          default:\n            this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    badgeStyleClass() {\n      return {\n        'p-badge p-component': true,\n        'p-badge-no-gutter': this.badge && String(this.badge).length === 1\n      };\n    }\n\n  }\n\n  Button.ɵfac = function Button_Factory(t) {\n    return new (t || Button)();\n  };\n\n  Button.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Button,\n    selectors: [[\"p-button\"]],\n    contentQueries: function Button_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      type: \"type\",\n      iconPos: \"iconPos\",\n      icon: \"icon\",\n      badge: \"badge\",\n      label: \"label\",\n      disabled: \"disabled\",\n      loading: \"loading\",\n      loadingIcon: \"loadingIcon\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      badgeClass: \"badgeClass\",\n      ariaLabel: \"ariaLabel\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    ngContentSelectors: _c2,\n    decls: 6,\n    vars: 17,\n    consts: [[\"pRipple\", \"\", 3, \"ngStyle\", \"disabled\", \"ngClass\", \"click\", \"focus\", \"blur\"], [4, \"ngTemplateOutlet\"], [3, \"ngClass\", \"class\", 4, \"ngIf\"], [\"class\", \"p-button-label\", 4, \"ngIf\"], [3, \"ngClass\"], [1, \"p-button-label\"]],\n    template: function Button_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function Button_Template_button_click_0_listener($event) {\n          return ctx.onClick.emit($event);\n        })(\"focus\", function Button_Template_button_focus_0_listener($event) {\n          return ctx.onFocus.emit($event);\n        })(\"blur\", function Button_Template_button_blur_0_listener($event) {\n          return ctx.onBlur.emit($event);\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵtemplate(2, Button_ng_container_2_Template, 1, 0, \"ng-container\", 1);\n        i0.ɵɵtemplate(3, Button_span_3_Template, 1, 9, \"span\", 2);\n        i0.ɵɵtemplate(4, Button_span_4_Template, 2, 2, \"span\", 3);\n        i0.ɵɵtemplate(5, Button_span_5_Template, 2, 4, \"span\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"disabled\", ctx.disabled || ctx.loading)(\"ngClass\", i0.ɵɵpureFunction5(11, _c1, ctx.icon && !ctx.label, (ctx.iconPos === \"top\" || ctx.iconPos === \"bottom\") && ctx.label, ctx.disabled || ctx.loading, ctx.loading, ctx.loading && !ctx.icon && ctx.label));\n        i0.ɵɵattribute(\"type\", ctx.type)(\"aria-label\", ctx.ariaLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.contentTemplate && (ctx.icon || ctx.loading));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.contentTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.contentTemplate && ctx.badge);\n      }\n    },\n    directives: [i1.Ripple, i2.NgStyle, i2.NgClass, i2.NgTemplateOutlet, i2.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Button;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ButtonModule = /*#__PURE__*/(() => {\n  class ButtonModule {}\n\n  ButtonModule.ɵfac = function ButtonModule_Factory(t) {\n    return new (t || ButtonModule)();\n  };\n\n  ButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ButtonModule\n  });\n  ButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, RippleModule]]\n  });\n  return ButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Button, ButtonDirective, ButtonModule }; //# sourceMappingURL=primeng-button.mjs.map","map":null,"metadata":{},"sourceType":"module"}